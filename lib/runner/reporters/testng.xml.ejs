<?xml version='1.0' encoding='UTF-8'?>
<testng-results ignored='' total='<%= module.tests %>' passed='<%= module.failures - module.tests %>' failed='<%= module.failures %>' skipped='<%= (Array.isArray(module.skipped)) ? module.skipped.length : 0 %>'>
    <%var d = new Date();
    var dateTime = d.getTime();%>
  <suite started-at='<%= dateTime%>' name='Test Results From <%= className %>' finished-at='<%= dateTime + module.time%>' duration-ms='<%= module.time %>'>
    <groups>
    </groups>
    <test started-at='<%= dateTime%>' name='Website Lauch Automation Testing Results' finished-at='<%= dateTime + module.time%>' duration-ms='<%= module.time %>'>
      <class name='<%= module.group || moduleName %>'>
            <% for (var item in module.completed) {
                var testcase = module.completed[item];
                var assertions = testcase.assertions; %>
                <% /*
                Printing out the passing meta tags on the page
                 */%>
                <% for (var i = 0; i < assertions.length; i++) { %> 
                <% if(item.includes('Google PageSpeed Insight Links')){ 
                        message = assertions[i].message; 

                        message = message.replace(new RegExp('\\[0;32m', 'g'), '');
                        message = message.replace(new RegExp('\\[0;31m', 'g'), '');
                        message = message.replace(new RegExp('\\[0m', 'g'), '');
                        
                        insightLinks = message.match(/(?=https).*?(?=\n)+/g);%>
                        <test-method started-at='' name='Links To Google PageSpeed Insights For Page: <%= insightLinks[0]%>' finished-at='' duration-ms='<%= testcase.time %>' status='PASS'>
                            <message>
                                <![CDATA[
                                Page: <a href='<%= insightLinks[0]%>'> <%= insightLinks[0]%> </a>

                                Link To Google PageSpeed Insights: <a href='<%= insightLinks[1]%>'> <%= insightLinks[1]%> </a>
                                ]]>
                            </message>
                            <reporter-output>
                            </reporter-output>
                        </test-method> 
                    <% } %>
                    <% if(item.includes('Wave Accessibility Links')){ 
                        message = assertions[i].message; 

                        message = message.replace(new RegExp('\\[0;32m', 'g'), '');
                        message = message.replace(new RegExp('\\[0;31m', 'g'), '');
                        message = message.replace(new RegExp('\\[0m', 'g'), '');
                        
                        waveLinks = message.match(/(?=https).*?(?=\n)+/g);
                        urlPath = "";

                        if(waveLinks[0].includes('.com/')){
                            urlPath = waveLinks[0].match(/(?<=com).*$/g);
                        }
                        else if(waveLinks[0].includes('.net/')){
                            urlPath = waveLinks[0].match(/(?<=net).*$/g);
                        }
                        else if(waveLinks[0].includes('.org/')){
                            urlPath = waveLinks[0].match(/(?<=org).*$/g);
                        }
                        else if(waveLinks[0].includes('.co/')){
                            urlPath = waveLinks[0].match(/(?<=co).*$/g);
                        }
                        else if(waveLinks[0].includes('.info/')){
                            urlPath = waveLinks[0].match(/(?<=info).*$/g);
                        }
                        else if(waveLinks[0].includes('.edu/')){
                            urlPath = waveLinks[0].match(/(?<=edu).*$/g);
                        }
                        else if(waveLinks[0].includes('.xyz/')){
                            urlPath = waveLinks[0].match(/(?<=xyz).*$/g);
                        }

                        if(urlPath[0] === '' || urlPath[0] === ' ' || urlPath[0] === '/'){
                            urlPath = 'Home';
                        }%>
                        <test-method started-at='' name='Links To Wave Accessibility Test For Page: <%= waveLinks[0]%>' finished-at='' duration-ms='<%= testcase.time %>' status='PASS'>
                            <message>
                                <![CDATA[
                                Page: <a href='<%= waveLinks[0]%>'> <%= urlPath%> </a>

                                Link To Wave Accessibility Test Page: <a href='<%= waveLinks[1]%>'> <%= waveLinks[1]%> </a>
                                ]]>
                            </message>
                            <reporter-output>
                            </reporter-output>
                        </test-method> 
                    <% } %>
                    <% if(item.includes('Structured Data Testing Links')){ 
                        message = assertions[i].message; 

                        message = message.replace(new RegExp('\\[0;32m', 'g'), '');
                        message = message.replace(new RegExp('\\[0;31m', 'g'), '');
                        message = message.replace(new RegExp('\\[0m', 'g'), '');
                        
                        //message = message.replace(new RegExp('<', 'g'), '');
                        message = message.replace(new RegExp('>,', 'g'), ',\n');
                        
                        sdtLinks = message.match(/(?=http).*?(?=\n)+/g);
                        urlPath = "";

                        if(sdtLinks[0].includes('.com/')){
                            urlPath = sdtLinks[0].match(/(?<=com).*$/g);
                        }
                        else if(sdtLinks[0].includes('.net/')){
                            urlPath = sdtLinks[0].match(/(?<=net).*$/g);
                        }
                        else if(sdtLinks[0].includes('.org/')){
                            urlPath = sdtLinks[0].match(/(?<=org).*$/g);
                        }
                        else if(sdtLinks[0].includes('.co/')){
                            urlPath = sdtLinks[0].match(/(?<=co).*$/g);
                        }
                        else if(sdtLinks[0].includes('.info/')){
                            urlPath = sdtLinks[0].match(/(?<=info).*$/g);
                        }
                        else if(sdtLinks[0].includes('.edu/')){
                            urlPath = sdtLinks[0].match(/(?<=edu).*$/g);
                        }
                        else if(sdtLinks[0].includes('.xyz/')){
                            urlPath = sdtLinks[0].match(/(?<=xyz).*$/g);
                        }

                        if(urlPath[0] === '' || urlPath[0] === ' ' || urlPath[0] === '/'){
                            urlPath = 'Home';
                        }
                        
                        %>
                        <test-method started-at='' name='Links To Google Structured Data Testing Tool For Page: <%= sdtLinks[0]%>' finished-at='' duration-ms='<%= testcase.time %>' status='PASS'>
                            <message>
                                <![CDATA[
                                Page: <a href='<%= sdtLinks[0]%>'> <%= urlPath%> </a><br/>
                                Link To Google Structured Data Testing Tool: <a href='<%= sdtLinks[1]%>'> <%= sdtLinks[1]%> </a><br/>
                                Data: 
                                <%= sdtLinks[2]%>
                                ]]>
                            </message>
                            <reporter-output>
                            </reporter-output>
                        </test-method> 
                    <% } %>
                    <% if(item.includes('List Of Header Tags')){ 
                        message = assertions[i].message; 

                        message = message.replace(new RegExp('\\[0;32m', 'g'), '');
                        message = message.replace(new RegExp('\\[0;31m', 'g'), '');
                        message = message.replace(new RegExp('\\[0m', 'g'), '');
                        
                        message = message.replace(new RegExp('>,', 'g'), '>,\n');
                        
                        hopefullyFirstLine = message.match(/[^\r\n]+/g);%>
                        <test-method started-at='' name='Header Tags From <%= hopefullyFirstLine[0]%>' finished-at='' duration-ms='<%= testcase.time %>' status='PASS'>
                            <message>
                                <![CDATA[
                                <%= message %>
                                ]]>
                            </message>
                            <reporter-output>
                            </reporter-output>
                        </test-method> 
                    <% } %>
                    <% if(item.includes('Collect Meta Tags')){ 
                        message = assertions[i].message; 

                        message = message.replace(new RegExp('\\[0;32m', 'g'), '');
                        message = message.replace(new RegExp('\\[0;31m', 'g'), '');
                        message = message.replace(new RegExp('\\[0m', 'g'), '');
                        
                        message = message.replace(new RegExp('<', 'g'), '');
                        message = message.replace(new RegExp('>,', 'g'), ',\n');
                        
                        hopefullyFirstLine = message.match(/[^\r\n]+/g);%>
                        <test-method started-at='' name='Meta Tags From <%= hopefullyFirstLine[0]%>' finished-at='' duration-ms='<%= testcase.time %>' status='PASS'>
                            <message>
                                <![CDATA[
                                <%= message %>
                                ]]>
                            </message>
                            <reporter-output>
                            </reporter-output>
                        </test-method> 
                    <% } %>


                    <% if(item.includes('Check Robots.txt')){ 
                        message = assertions[i].message; 

                        message = message.replace(new RegExp('\\[0;32m', 'g'), '');
                        message = message.replace(new RegExp('\\[0;31m', 'g'), '');
                        message = message.replace(new RegExp('\\[0m', 'g'), '');
                        
                        //message = message.replace(new RegExp('<', 'g'), '');
                        //message = message.replace(new RegExp('>,', 'g'), ',\n');
                        
                        hopefullyFirstLine = message.match(/[^\r\n]+/g);
                        if(!assertions[i].failure){%>
                            <test-method started-at='' name='<%= item %> - <%= hopefullyFirstLine[0]%>' finished-at='' duration-ms='<%= testcase.time %>' status='PASS'>
                        <%}else{%>
                            <test-method started-at='' name='<%= item %> - <%= hopefullyFirstLine[0]%>' finished-at='' duration-ms='<%= testcase.time %>' status='FAIL'>
                        <%}%>
                            <message>
                                <![CDATA[
                                <%= message %>
                                ]]>
                            </message>
                            <reporter-output>
                            </reporter-output>
                        </test-method> 
                    <% } %>

                    <% if(item.includes('NoIndex NoFollow')){ 
                        message = assertions[i].message; 

                        message = message.replace(new RegExp('\\[0;32m', 'g'), '');
                        message = message.replace(new RegExp('\\[0;31m', 'g'), '');
                        message = message.replace(new RegExp('\\[0m', 'g'), '');
                        
                        //message = message.replace(new RegExp('<', 'g'), '');
                        //message = message.replace(new RegExp('>,', 'g'), ',\n');
                        
                        hopefullyFirstLine = message.match(/[^\r\n]+/g);
                        if(!assertions[i].failure){%>
                            <test-method started-at='' name='<%= item %> - <%= hopefullyFirstLine[0]%>' finished-at='' duration-ms='<%= testcase.time %>' status='PASS'>
                                <message>
                                    <![CDATA[
                                    <font color="green">
                                    <%= message %>
                                    </font>
                                    ]]>
                        <%}else{%>
                            <test-method started-at='' name='<%= item %> - <%= hopefullyFirstLine[0]%>' finished-at='' duration-ms='<%= testcase.time %>' status='FAIL'>
                                <message>
                                    <![CDATA[
                                    <font color="red">
                                    <%= message %>
                                    </font>
                                    ]]>
                        <%}%>
                            </message>
                            <reporter-output>
                            </reporter-output>
                        </test-method> 
                    <% } %>

                    <% if(item.includes('Collect DNS')){ 
                        message = assertions[i].message; 

                        message = message.replace(new RegExp('\\[0;32m', 'g'), '');
                        message = message.replace(new RegExp('\\[0;31m', 'g'), '');
                        message = message.replace(new RegExp('\\[0m', 'g'), '');
                        
                        //message = message.replace(new RegExp('<', 'g'), '');
                        //message = message.replace(new RegExp('>,', 'g'), ',\n');
                        
                        hopefullyFirstLine = message.match(/[^\r\n]+/g);
                        if(!assertions[i].failure){%>
                            <test-method started-at='' name='<%= item %> - <%= hopefullyFirstLine[0]%>' finished-at='' duration-ms='<%= testcase.time %>' status='PASS'>
                        <%}else{%>
                            <test-method started-at='' name='<%= item %> - <%= hopefullyFirstLine[0]%>' finished-at='' duration-ms='<%= testcase.time %>' status='FAIL'>
                        <%}%>
                            <message>
                                <![CDATA[
                                <%= message %>
                                ]]>
                            </message>
                            <reporter-output>
                            </reporter-output>
                        </test-method> 
                    <% } %>


                    <% /*
                        Printing out the rest of the passing tests
                        */%>
                    <% if(!assertions[i].failure && (item.includes('Verify All Pages'))){ 
                        message = assertions[i].message;

                        message = message.replace(new RegExp('\\[0;32m', 'g'), '');
                        message = message.replace(new RegExp('\\[0;31m', 'g'), '');
                        message = message.replace(new RegExp('\\[0m', 'g'), '');

                        hopefullyFirstLine = message.match(/[^\r\n]+/g);
                        maybeParen = '';
                        if (hopefullyFirstLine[0].includes('(')) {
                            maybeParen = ')';
                        } %>
                        <test-method started-at='' name='<%= item %> - #<%=i%> - <%= hopefullyFirstLine[0]%> <%= maybeParen %>' finished-at='' duration-ms='<%= testcase.time %>' status='PASS'>
                            <message>
                                <![CDATA[
                                <%= message %>
                                ]]>
                            </message>
                            <reporter-output>
                            </reporter-output>
                        </test-method> 
                    <% } %>
                    <% /*
                        Printing out the failing tests
                        */%>
                    <% if (assertions[i].failure) {
                        message = assertions[i].message;

                        message = message.replace(new RegExp('\\[0;32m', 'g'), '');
                        message = message.replace(new RegExp('\\[0;31m', 'g'), '');
                        message = message.replace(new RegExp('\\[0m', 'g'), '');

                            hopefullyFirstLine = message.match(/[^\r\n]+/g);
                            maybeParen = '';
                            if (hopefullyFirstLine[0].includes('(')) {
                                maybeParen = ')';
                            }%>
                        <test-method  started-at='' name='<%= item %> - #<%=i%> - <%= hopefullyFirstLine[0]%> <%= maybeParen %>' finished-at='' duration-ms='<%= testcase.time %>' status='FAIL'>
                            <exception class='<%= assertions[i].failure %>'>
                                <message>
                                    <![CDATA[
                                    <%= message %>
                                    ]]>
                                </message>
                                <full-stacktrace>
                                    <![CDATA[
                                        <%= assertions[i].stackTrace %>
                                    ]]>
                                </full-stacktrace>
                            </exception>
                            <reporter-output>
                            </reporter-output>
                        </test-method>
                        <% if (assertions[i].screenshots && assertions[i].screenshots.length > 0 ) {
                            %><system-out><% for (var j = 0; j < assertions[i].screenshots.length; j++) { %>[[ATTACHMENT|<%= assertions[i].screenshots[j] %>]]<% } %></system - out > <%
                        } %> <%
                    }
                }
            }%>
        
        <% if (module.skipped && (module.skipped.length > 0)) { %>
            <% for (var j = 0; j < module.skipped.length; j++) { %>
                <test-method started-at='' name='<%= module.skipped[j] %> - <%= className %>' finished-at='' duration-ms='<%= testcase.time %>' status='SKIP'>
                    <message>
                        <![CDATA[
                        <%= message %>
                                ]]>
                    </message>
                    <reporter-output>
                    </reporter-output>
                </test-method> 
            <% } %>
        <% } %>

        <% if (systemerr != '') { %>
            <error message='<%= systemerr %>'>
                <%= systemerr %>
            </error>
        <% } %>

      </class> 
    </test> 
  </suite> 
</testng-results>